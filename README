
FLASK RATINGS APPLICATION
=========================

This application implements an example ratings application and server for Flask
micorframework. 
This application is current hosted on an Amazon AMI EC2 instance
A unit test case library is also provided.


AWS SETUP:
==========

To test against EC2 hosted applicaiton set the following environment variables
in your environment:
    export FLASK_APP_PORT=10702
    export FLASK_APP_HOST=54.209.200.143
To execute unit test cases change directory into ratings-api-challenge/test and type the following:
    nosetests


LOCAL SETUP:
============

To setup locally run set the following environment variables in your environment:
    export FLASK_APP_PORT=10702
    export FLASK_APP_HOST=localhost
and run:
    python3 flask_ratings_app.py

Open an interactive browser to test or use unit test case library provided, change directory into
atings-api-challenge/test and type the following: 
    nosetests


TESTING:
========

HOST = FLASK_APP_HOST = localhost|54.209.200.143
PORT = FLASK_APP_PORT = 10702

Run unit test cases (as mentioned above) or launch an interactive shell via:
    python3

    >>> import requests
    # GET
    >>> result = requests.get('http://HOST:PORT/movies')
    >>> result.json()
    [{'rating': 100.0, 'title': 'Batman Begins', 'imdbRating': '8.3', 'id': 1, 'metascore': '70'}, {'rating': 98.0, 'title': 'The Dark Knight', 'imdbRating': '9.0', 'id': 2, 'metascore': '82'}]
    >>> result.status_code
    200
    # POST
    >>> import json
    >>> payload = {"movie": "100"}
    >>> result = requests.post('http://HOST:PORT/movies', data=json.dumps(payload), headers=HEADERS)
    >>> result.json()
    [{'rating': 100.0, 'title': 'Batman Begins', 'imdbRating': '8.3', 'id': 1, 'metascore': '70'}, {'rating': 98.0, 'title': 'The Dark Knight', 'imdbRating': '9.0', 'id': 2, 'metascore': '82'}, {'rating': 100.0, 'title': 'movie', 'imdbRating': '7.8', 'id': 3, 'metascore': '83'}]
    >>> result.status_code
    200
    # PUT
    >>> payload = {"movie": "58"}
    >>> result = requests.put('http://srmsbox02:10702/movies', data=json.dumps(payload), headers=HEADERS)
    >>> result.json()
    [{'rating': 100.0, 'title': 'Batman Begins', 'imdbRating': '8.3', 'id': 1, 'metascore': '70'}, {'rating': 98.0, 'title': 'The Dark Knight', 'imdbRating': '9.0', 'id': 2, 'metascore': '82'}, {'rating': 58.0, 'title': 'movie', 'imdbRating': '7.8', 'id': 3, 'metascore': '83'}]
    >>> result.status_code
    200
    # GET by ID
    >>> result = requests.get('http://srmsbox02:10702/movies/7')
    >>> result.json()
    {}
    >>> result = requests.get('http://srmsbox02:10702/movies/2')
    >>> result.json()
    {'rating': 98.0, 'title': 'The Dark Knight', 'imdbRating': '9.0', 'id': 2, 'metascore': '82'}
    >>> result.status_code
    200
